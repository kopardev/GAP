#!/home/vnkoparde/opt/Python-2.7.2/bin/python
import HTSeq
import sys,os,argparse,shlex,subprocess

#~ Version 1.0

parser=argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description=
"""This script calculate stats for assembly and its gene calls

Author: Vishal N Koparde, Ph. D. 
Created: 120716
Modified: 120716
Version: 1.0""",
 version="1.0")
parser.add_argument('--assemblyFasta',help='input assembly fasta file',dest='afasta',required=True,metavar="<assembly.fasta>")
parser.add_argument('--genesFasta',help='input genes fasta file',dest='gfasta',required=True,metavar="<genes.fasta>")
parser.add_argument('-o',help='output stats in this file',dest='outfile',required=True,metavar='<out.stats>')
args=vars(parser.parse_args())

if (not os.path.exists(args['afasta'])):
	print args['afasta']+" file not found!"
	sys.exit()

if (not os.path.exists(args['gfasta'])):
	print args['gfasta']+" file not found!"
	sys.exit()


try:
	gapdir=os.environ['GAPDIR']
except KeyError:
	gapdir="/usr/global/blp/GenomeAnnotationPipeline"

ncontigs=0
longestlen=0
shortestlen=1000000000000000000
totallen=0
for s in HTSeq.FastaReader(args['afasta']):
	ncontigs+=1
	ls=len(s)
	if ls > longestlen:
		longestname=s.name	
		longestlen=ls
	if ls < shortestlen:
		shortestname=s.name
		shortestlen=ls
	totallen+=ls

longestgenelen=0
shortestgenelen=10000000
totalgenelen=0
ngenes=0

for s in HTSeq.FastaReader(args['gfasta']):
	ngenes+=1
	ls=len(s)
	if ls > longestgenelen:
		longestgenename=s.name
		longestgenelen=ls
	if ls < shortestgenelen:
		shortestgenename=s.name
		shortestgenelen=ls
	totalgenelen+=ls

avggenelen=totalgenelen*1.0/ngenes

cmd1="mfsizes+ -f "+args['afasta']
os.system(cmd1)
cmd2="mfsizes+ -f "+args['gfasta']
os.system(cmd2)

cmd="grep N50 "+args['afasta']+".sizes_hist > n50.tmp"
os.system(cmd)
N50=open("n50.tmp",'r')
line=N50.readline()
line=line.split()
n50len=line[2]
n50contigs=line[3]
n50avgcontiglen=line[4]
N50.close()
os.system("rm -f n50.tmp")

cmd="grep -m1 GC "+args['afasta']+".sizes_hist > gc.tmp"
os.system(cmd)
GC=open("gc.tmp",'r')
line=GC.readline()
line=line.split()
gc=line[1]
GC.close()
os.system("rm -f gc.tmp")

fileName, fileExtension = os.path.splitext(args['gfasta'])
pepFileName = fileName + ".faa"
gffFileName = fileName + ".gff"
cmd3=gapdir+"/translateFasta.pl --fna "+args['gfasta']+" --faa "+pepFileName
os.system(cmd3)

cmd4=gapdir+"/calculateIntergenicLength.pl "+gffFileName+" "+args['afasta']+">intergenic.dist"
os.system(cmd4)
ID=open("intergenic.dist",'r')
intergenicLen=ID.readline()
intergenicLen=intergenicLen.rstrip()
intergenicLen=intergenicLen.lstrip()
ID.close()
os.system("rm -f intergenic.dist")


tmpaFasta=args['afasta'].split("/")
tmpaFasta=tmpaFasta[-1]
tmpgFasta=args['gfasta'].split("/")
tmpgFasta=tmpgFasta[-1]

outfile=open(args['outfile'],'w')

gsizemb="%10.2f"%(totallen*1.0/1000000)
gsizemb=gsizemb.lstrip()
tsizemb="%10.2f"%(totalgenelen*1.0/1000000)
tsizemb=tsizemb.lstrip()
avggenelen="%10.2f"%(avggenelen)
avggenelen=avggenelen.lstrip()
gdensity="%10.2f"%(ngenes/(totallen*1.0/1000000))
gdensity=gdensity.lstrip()
ttog=totalgenelen*1.0/totallen
ttog="%10.5f"%(ttog)
ttog=ttog.lstrip()

outfile.write("Assembly file name         \t\t\t:%s\n"%(args['afasta']))
outfile.write("Genome Size(Kb)            \t\t\t:%d\n"%(totallen*1.0/1000))
outfile.write("Genome Size(Mb)            \t\t\t:%s\n"%(gsizemb))
outfile.write("Percent GC                 \t\t\t:%s\n"%(gc))
outfile.write("Total number of contigs    \t\t\t:%d\n"%(ncontigs))
outfile.write("Longest contig length      \t\t\t:%d\n"%(longestlen))
outfile.write("Longest contig ID          \t\t\t:%s\n"%(longestname))
outfile.write("Shortest contig length     \t\t\t:%d\n"%(shortestlen))
outfile.write("Shortest contig ID         \t\t\t:%s\n"%(shortestname))
outfile.write("N50 length                 \t\t\t:%s\n"%(n50len))
outfile.write("N50 No. of contigs         \t\t\t:%s\n"%(n50contigs))
outfile.write("N50 avg. contig length     \t\t\t:%s\n"%(n50avgcontiglen))
outfile.write("Genes file                 \t\t\t:%s\n"%(args['gfasta']))
outfile.write("Translated Genes file      \t\t\t:%s\n"%(pepFileName))
outfile.write("Transcriptome Size(Kb)     \t\t\t:%d\n"%(totalgenelen*1.0/1000))
outfile.write("Transcriptome Size(Mb)     \t\t\t:%s\n"%(tsizemb))
outfile.write("Total number of genes      \t\t\t:%d\n"%(ngenes))
outfile.write("Average gene length        \t\t\t:%s\n"%(avggenelen))
outfile.write("Longest gene length        \t\t\t:%d\n"%(longestgenelen))
outfile.write("Longest gene ID            \t\t\t:%s\n"%(longestgenename))
outfile.write("Shortest gene length       \t\t\t:%d\n"%(shortestgenelen))
outfile.write("Shortest gene ID           \t\t\t:%s\n"%(shortestgenename))
outfile.write("Gene Density (per Mb)      \t\t\t:%s\n"%(gdensity))
outfile.write("Avg Intergenic Length      \t\t\t:%s\n"%(intergenicLen))
outfile.write("Transcriptome/Genome ratio \t\t\t:%s\n"%(ttog))
outfile.write("\nFor additional stats see files:\n")
outfile.write("%s\n"%(tmpaFasta+".sizes"))
outfile.write("%s\n"%(tmpaFasta+".sizes2"))
outfile.write("%s\n"%(tmpaFasta+".sizes_hist"))
outfile.write("%s\n"%(tmpaFasta+".hist.svg"))
outfile.write("%s\n"%(tmpgFasta+".sizes"))
outfile.write("%s\n"%(tmpgFasta+".sizes2"))
outfile.write("%s\n"%(tmpgFasta+".sizes_hist"))
outfile.write("%s\n"%(tmpgFasta+".hist.svg"))

outfile.close()
sys.exit()
